brew install minikube // Kubernetes installation

this installation comes with docker and kubectl installed.
minikube start -vm hyperkite // start the orchestration with the hypervisor
kubectl create deployment nginx-depl --image=nginx // create the deployment(container) from nginx image.
kubectl exec -it nginx-depl bin/bash 
kubectl get  service // shows all the service available
Amazon EKS control tool - Amazon Elastic Kubernetes Service. 

docker build -t my-app:1.0 

//queryOptions
function groupOptions() {
    return defineOption({
        queryKey: ["group"],
        queryFn: async() => await fetch(url),
        staleTime: 6 * 60 * 1000,
        select: (data) => data.length,
    })
}

//useInfiniteQuery
useInfiniteQuery({
    queryKey: ["projects"],
    queryFn: async({queryKey, pageParam}) => await fetch(`/api/projects/?cursor=${pageParam}`).then(response => response.json()),
    initialPageParam: 0,
    getNextPageParam: (lastPage, pages) => lastPage.nextCursor
})

//SSR using react query 

//setup _app.js 
import { QueryClientProvider, QueryClient, HydrationBoundary } from "@tanstack/react-query";

export default function MyApp({Component, pageProps}) {
    const [qc] = React.useState(() => new QueryClient({
        defaultOptions: {
            queries: {
                staleTime: 5 * 1000
            }
        },
        queryOptions: {},
        mutationOptions: {}
    }))
    return (
        <QueryClientProvider client={qc}>
            <HydrationBoundary client={dehydrate(qc)}>
                <Component {...pageProps} />
            </HydrationBoundary>
        </QueryClientProvider>
    )
}

//project/tasks.page
const getProjectTasksPage = async ({ queryKey, signal }) => {
    const response = await fetch(url + queryKey, { signal })
    if(!response.ok) throw new Error(response.statusText)
    return response.json()
}
const qc = new QueryClient();
export async function getServerSideProps(context) {
    await qc.prefetchQuery({
        queryKey: ["project", "tasks"],
        queryFn: getProjectTasks
    })
    return {
        props: {
            dehydratedState: dehydrate(qc)
        }
    }
}

function Tasks() {
    const { data } = useQuery({ queryKey: ["project", "tasks"], queryFn: getProjectTasks})
    const { data: comments } = useQuery({ queryKey: ["project", "comments"], queryFn: getProjectTaskCommnet})

    return (
        <>
            {data.project.tasks.map((task) => (<>{task.title}</>))}
            {comments}
        </>
    )
}

export default function TaskRoute({ dehydratedState }) {

    return (
        <HydrationBoundary client={dehydratedState}>
            <Tasks />
        </HydrationBoundary>
    )
}

//customHook testing 
import { waitFor, renderHook } from '@testing-library/react'

const wrapper = ({ Component, pageProps, children }) => {
    <QueryClientProvider client={qc}>
        <Component {...pageProps} /> {children} <Outlet />
    </QueryClientProvider>
}
const { result } = renderHook(() => customHook(), { wrapper })
await waitFor(() => expect(result.current.isSuccess).tobe(true))
expect(result.current.data).toEqual('Hello')


//Route handlers
export async function GET(request: Request) {
    const data = await fetch('/api/settings', {
        signal: signal,
        headers: { 'Content-Type': 'application/json', 'Accept': 'application/json', 'API-KEY': 'hello' },
        next: {
            revalidate: 60,
            tags: ['settings']
        }
    }).then(response => response.json())
    return Response.json({ data })
}

//generic function inference.
import { z } from 'zod';

function awesomeFunction<TSchema extends Schema>(schema: z.Schema<TSchema>, handler: (input: TSchema) => void) {

    return (input: unknown) => handler(schema.parse(input))
}

const schema = z.object({
    id: z.number(),
    fullName: z.string(),
})
type Schema = z.infer<typeof schema>

awesomeFunction(schema, (input) => console.log(input.fullName))

//convert an array into a map/object.
const arr = [1,4,9,5,4,34,34]
const m = new Map();
m.forEach( x => {
    m.set(x, (m.get(x) || 0) + 1)
})

//write a sql query to extract year and month from timestamp 
SELECT EXTRACT (year FROM payment_ts) AS year,
    EXTRACT (month FROM payment_ts) AS mon,
    sum(amount) AS rev
FROM payment
GROUP BY year, mon
HAVING SUM(amount) > 20
ORDER BY rev ASC
LIMIT 10

learnt today the real difference btw a cloud engineer and a devOps, as cloud engineers are 
involued with infrastruture like aws, azure and gcp, networking, security while a devOps is 
involued with CI/CD tools and pipelines for ci and cd. 

react github interview profile

const userSchema = new mongoose.Schema({
    name: String,
  });
  
  // Define the Album schema
  const albumSchema = new mongoose.Schema({
    title: String,
    performer: String,
    cost: Number,
  });
  
  // Define the Purchase schema, referencing User and Album
  const purchaseSchema = new mongoose.Schema({
    user: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'User',
    },
    album: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'Album',
    },
  });

  const p1 = new Promise((resolve, reject) => setTimeout(resolve, 500, 'Yes ooo!'))
const p2 = new Promise((resolve, reject) => setTimeout(reject, 100, 'No ooo!'))
await Promise.race([p1, p2]).then(console.log).catch(e => console.error('Shayo '+e))
await Promise.any([p1, p2]).then(console.log).catch(e => console.warn('Shayo '+e))

function loader({ params, request }) {
    const noteId = params.noteid;
    const newNotes = notes.filter(note => note.id !== noteId)
    const selectedNote = notes.find(note => note.id === noteId )
}

curl --request POST \
--url 'http://localhost:3000/api/users' \
--header 'Content-Type: application/json' \
--data '{
    "gender": "Femal",
    "age": "34"
}'

fire and forget fetch calls
await fetch(url, {
    method: 'POST',
    headers: {
        "Authorization": 'bearer ' + token,
        "Content-Type": "application/json
    },
    body: JSON.stringify(newNotes)
})

import type { NextApiRequest, NextApiResponse } from 'next';
import Cors from 'cors';

const cors = Cors({
    methods: ['POST', 'GET', 'HEAD']
})

async function runMiddleware(req: NextApiRequest, res: NextApiResponse, fn: Function){
    return new Promise((resolve, reject) => {
        fn(req, res, (result: any) => {
            if(result instanceof Error){
                return reject(result)
            }
            return resolve(result)
        })
    })
}

export default async function handler(request: NextAPIRequest, response: NextAPIResponse) {
    await runMiddleware(request, response, cors)
    response.json({})
}

//Typescript builder pattern

interface FooBuilder<T = never> {
    add: <newType>() => FooBuilder<newType | T>;
    value: T
}

declare const u: FooBuilder;

const r = u.add<string>()
 .add<number>()
 .add<boolean>().value;

console.log(r);


import { relations } from 'drizzle-orm';

export const user = pgTable('user', {
    id: serial('id').primaryKey(),
    name: text('name')
})

export const userRelations = relations(user, ({ many }) => ({
    posts: many(post)
}))

export const post = pgTable('post', {
    id: serial('id').primaryKey(),
    title: text('title').notNull(),
    content: text('content'),
    authorId: integer('author_id'),
})

export const postRelations = relations(post, ({ one }) => ({
    author: one(user, {
        fields: [post.authorId],
        references: [user.id]
    })
}))

type Fruits = '@M' | '@G' | '@A';
type Switch<T extends Fruits> = {
    '@M': 'Mango',
    '@G': 'Grape',
    '@A': 'Apple',
}[T];
type Mango = Switch<'@M'>
const mango: mango = 'Mango'

Even though native ESM is now widely supported, shipping unbundled ESM in production is still inefficient (even with HTTP/2) due to the additional network round trips caused by nested imports. To get the optimal loading performance in production, it is still better to bundle your code with tree-shaking, lazy-loading and common chunk splitting (for better caching).


Happy 31th last day of 2023.

We're thrilled to welcome you to the exciting year of 2024!

May the year be filled with achievements, growth, and moments of joy that leave a lasting impact.

database index is a data structure that referecnce the location of records in a table based off one or multiple attribute of same table.

createConfig(), createEnv({
    clientPrefix: 'PUBLIC_',
    server: {
        'DATABASE_URL': z.string().url(),
        'API_TOKEN': z.string().min(1)
    },
    client: {
        'PUBLIC_PUBLISH_KEY': z.string().min(1)
    },
    runtimeEnv: process.env,
})

in as much as we write test to boost confidence in the way users use our application, we should 
also test in a way that users uses our application and not the implementation details.


import express, { Request, Response, NextFunction, Express } from 'express';
const app: Express = express();

app.use(express.json());

const port = process.env.PORT || 8080;

app.get(
  '/',
  async (req: Request, res: Response, next: NextFunction): Promise<void> => {
    try {
      res.status(200).json({
        message: 'Hurray!! we create our first server on bun js',
        success: true,
      });
    } catch (error: unknown) {
      next(new Error((error as Error).message));
    }
  },
);

app.listen(port, () => {
  console.log(`Server is up and running on port ${port}`);
});

bun run server.ts

how to clone a remote github branch 
git clone -b eo/sc-2345/getting-back-into-2024 <remote-repo-url>
git clone -b eo/sc-2345/getting-back-into-2024 --single-branch <remote-repo-url>